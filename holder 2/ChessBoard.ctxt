#BlueJ class context
comment0.target=ChessBoard
comment0.text=\r\n\ The\ ChessBoard\ Class\ is\ a\ world\ that\ the\ chess\ game\ is\ played\ in.\ All\ the\ logic\ for\ the\ pieces,\ including\ checks,\ checkmates,\ updating\ the\ grid\ and\ turns\ are\ all\ written\ here\ (Michael).\r\n\ The\ class\ will\ also\ write\ all\ of\ the\ information\ to\ a\ save\ file\ that\ the\ user\ can\ select\ after\ the\ game\ is\ complete\ (Jamie).\r\n\ \r\n\ @author\ Michael\ Tuccillo\ /\ Jamie\ Lee\r\n\ @version\ 1.0\r\n
comment1.params=usernameIn\ timeIn
comment1.target=ChessBoard(java.lang.String,\ int)
comment1.text=\r\n\ Constructor\ for\ the\ class\ ChessBoard.\ This\ constructor\ sets\ the\ the\ tiles\ on\ which\ the\ pieces\ are\ displayed\ on,\ the\ pieces,\ the\ timer,\ and\ the\ buttons.\r\n\ \r\n\ @param\ usernameIn\ this\ is\ the\ username\ of\ the\ user,\ and\ it\ is\ used\ for\ saving\ their\ game\ to\ the\ appropriate\ file\ (different\ users\ can\ save\ to\ different\ files)\r\n\ @param\ timeIn\ is\ the\ time\ mode\ of\ the\ game\r\n
comment10.params=
comment10.target=int[]\ getEnpassantLocation()
comment10.text=\r\n\ This\ getEnpassantLocation\ method\ returns\ an\ array\ (of\ size\ 2,\ for\ the\ row\ and\ column),\ of\ where\ the\ en\ passant'ed\ piece\ is\ happening\r\n\ \r\n\ @return\ int[]\ the\ array\ of\ where\ the\ en\ passant\ occurs\r\n\ \r\n
comment11.params=newCol\ newRow\ movedPiece
comment11.target=void\ checkUpdateBoard(int,\ int,\ ChessPiece)
comment11.text=\r\n\ This\ checkUpdateBoard\ method\ checks\ for\ checks\ on\ a\ "pseudo"\ grid\r\n\ \r\n\ @return\ int[]\ the\ array\ of\ where\ the\ en\ passant\ occurs\r\n\ \r\n
comment12.params=
comment12.target=boolean\ getFakeCheck()
comment12.text=\r\n\ This\ getFakeCheck\ method\ returns\ true\ of\ false\ whether\ a\ fake\ check\ has\ occured\ in\ the\ "pseudo\ grid"\ (the\ grid\ that\ checks\ for\ checks)\r\n\ \r\n\ @return\ boolean\ this\ returns\ whether\ a\ fake\ check\ has\ occured\r\n\ \r\n
comment13.params=grid
comment13.target=boolean\ checkForStalemate(ChessPiece[][])
comment13.text=\r\n\ This\ checkForStalement\ method\ returns\ true\ or\ false\ whether\ a\ player\ has\ no\ legal\ moves\r\n\ \r\n\ @return\ boolean\ this\ returns\ whether\ a\ player\ has\ no\ legal\ moves\ \r\n\ \r\n
comment14.params=grid
comment14.target=boolean\ checkForCheck(ChessPiece[][])
comment14.text=\r\n\ This\ checkForCheck\ method\ checks\ if\ the\ king\ is\ in\ check\ and\ returns\ true\ or\ false\ whether\ it\ is\ or\ it\ is\ not\r\n\ \r\n\ @return\ boolean\ this\ returns\ whether\ the\ king\ is\ in\ check\r\n\ \r\n
comment15.params=row\ col\ grid
comment15.target=void\ test(int,\ int,\ ChessPiece[][])
comment15.text=\r\n\ This\ test\ method\ gets\ all\ the\ possible\ moves\ of\ the\ piece\ that\ is\ passed\ in\r\n\ \r\n\ @param\ row\ this\ is\ the\ row\ of\ where\ the\ piece\ is\ currently\ \r\n\ @param\ col\ this\ is\ the\ coloumn\ of\ where\ the\ piece\ is\ currently\r\n\ @param\ grid\ this\ is\ the\ grid\ of\ all\ the\ pieces\r\n\ \r\n
comment16.params=grid
comment16.target=boolean\ checkForMate(ChessPiece[][])
comment16.text=\r\n\ This\ checkForStalement\ method\ checks\ for\ all\ the\ possible\ moves\ for\ either\ white\ or\ black\ and\ checks\ if\ those\ moves\ can\ cancel\ the\ check\ or\ not.\ \r\n\ If\ not,\ this\ means\ that\ it\ is\ checkmate\r\n\ \r\n\ @param\ grid\ this\ is\ the\ 2d\ grid\ that\ contains\ all\ the\ pieces\r\n\ @return\ boolean\ this\ returns\ whether\ it\ is\ checkmate\ or\ not\r\n\ \r\n
comment17.params=
comment17.target=boolean\ getCheckingMate()
comment17.text=\r\n\ This\ checkForCheck\ method\ gets\ if\ the\ king\ is\ checkmated\r\n\ \r\n\ @return\ boolean\ this\ returns\ whether\ the\ king\ is\ checkmated\r\n\ \r\n
comment18.params=pieceType
comment18.target=void\ decPromoted(java.lang.String)
comment18.text=\r\n\ This\ decPromoted\ method\ declares\ the\ type\ of\ piece\ that\ has\ been\ promoted\ by\ the\ user.\ This\ is\ used\ for\ replays,\ as\ the\ type\ of\ piece\ promoted\ is\ required\ for\ the\ replays\r\n\ to\ know\ what\ kind\ of\ piece\ has\ been\ promoted.\r\n\ \r\n\ @param\ pieceType\ this\ the\ type\ of\ piece\ that\ has\ been\ promoted\ \r\n\ \r\n
comment19.params=piece
comment19.target=void\ setPromotingPiece(ChessPiece)
comment19.text=\r\n\ This\ setPromotingPiece\ sets\ the\ promoted\ pawn\ to\ the\ desired\ promoted\ piece\r\n\ \r\n\ @param\ piece\ this\ is\ the\ piece\ that\ is\ being\ promoted\ to\r\n\ \r\n
comment2.params=
comment2.target=ChessPiece[][]\ getAllPieces()
comment2.text=\r\n\ This\ getAllPieces\ method\ returns\ the\ 2d\ grid\ of\ all\ the\ pieces\r\n\ \r\n\ @return\ ChessPiece[][]\ this\ is\ the\ grid\ that\ holds\ all\ the\ pieces\ \r\n\ \r\n
comment20.params=iniRow\ iniCol\ newRow\ newCol\ movedPiece
comment20.target=void\ updateList(int,\ int,\ int,\ int,\ ChessPiece)
comment20.text=\r\n\ This\ updateList\ method\ updates\ the\ list\ of\ moves\ to\ later\ be\ used\ in\ the\ replay\ feature.\r\n\ \r\n\ @param\ iniRow\ the\ initial\ row\ of\ the\ piece\ moved\r\n\ @param\ iniCol\ the\ inital\ coloumn\ of\ the\ piece\ moved\r\n\ @param\ newRow\ the\ new\ row\ of\ the\ piece\ moved\r\n\ @param\ newCol\ the\ new\ coloumn\ of\ the\ piece\ moved\r\n\ @param\ movedPiece\ the\ piece\ that\ has\ been\ moved\r\n\ \r\n
comment21.params=numberToSave
comment21.target=void\ copyList(int)
comment21.text=\r\n\ This\ copyList\ method\ is\ used\ to\ copy\ the\ current\ game\ onto\ the\ user's\ desired\ game\ save\ file.\ This\ is\ used\ for\ replays.\r\n\ \r\n\ @param\ numberToSave\ this\ integer\ is\ the\ file\ number\ of\ which\ the\ game\ will\ save\ to.\r\n\ \r\n
comment22.params=yLoc
comment22.target=void\ createCheckMark(int)
comment22.text=\r\n\ This\ createCheckMark\ method\ creates\ a\ checkmark\ to\ help\ indicate\ which\ file\ the\ user\ has\ saved\ to\r\n\ \r\n
comment23.params=
comment23.target=void\ act()
comment23.text=\r\n\ This\ act\ method\ runs\ as\ a\ loop\ that\ controls\ the\ function\ of\ ours\ timers,\ as\ well\ as\ for\ checking\ for\ the\ end\ state\ of\ the\ game.\r\n\ \r\n
comment3.params=
comment3.target=java.lang.String\ getTurn()
comment3.text=\r\n\ This\ getTurn\ method\ gets\ who's\ turn\ it\ currently\ is\r\n\ \r\n\ @return\ String\ this\ returns\ a\ string\ of\ whoever's\ turn\ it\ currently\ is\r\n\ \r\n
comment4.params=
comment4.target=void\ removeHighlights()
comment4.text=\r\n\ This\ removeHighlights\ method\ removes\ the\ highlighted\ spots\ currently\ on\ the\ screen\ (both\ red\ and\ blue)\ \ \r\n
comment5.params=
comment5.target=void\ promotions()
comment5.text=\r\n\ This\ promotions\ method\ displays\ the\ 4\ different\ pieces\ (rook,\ queen,\ knight,\ bishop)\ that\ the\ user\ can\ promote\ to,\ when\ their\ pawn\ promotes.\ \ \r\n\ \r\n
comment6.params=
comment6.target=ChessPiece[]\ getPromotePieces()
comment6.text=\r\n\ This\ getPromotePieces\ method\ returns\ the\ list\ of\ the\ 4\ promotable\ pieces\ (bishops,\ knights,\ queens,\ rooks)\r\n\ \r\n\ @return\ ChessPiece[]\ this\ a\ list\ of\ the\ promotion\ pieces\r\n\ \r\n
comment7.params=newCol\ newRow\ movedPiece
comment7.target=void\ updateBoard(int,\ int,\ ChessPiece)
comment7.text=\r\n\ This\ updateBoard\ method\ updates\ the\ board\ (the\ pieces\ seen\ on\ the\ screen)\ and\ grid\ as\ the\ user\ plays\ a\ move.\ \ \r\n\ \r\n\ @param\ newCol\ the\ new\ column\ of\ the\ piece\ moved\r\n\ @param\ newRow\ the\ new\ row\ of\ the\ piece\ moved\r\n\ @param\ movedPiece\ the\ piece\ that\ has\ been\ moved\r\n\ \r\n
comment8.params=
comment8.target=boolean\ getCheck()
comment8.text=\r\n\ This\ getCheck\ method\ returns\ true\ or\ false\ whether\ the\ king\ is\ in\ check\r\n\ \r\n\ @return\ boolean\ this\ gets\ if\ the\ king\ is\ checked\r\n\ \r\n
comment9.params=
comment9.target=boolean\ getEnpassant()
comment9.text=\r\n\ This\ getEnpassant\ method\ returns\ true\ or\ false\ whether\ a\ pawn\ can\ take\ a\ pawn\ en\ passant\r\n\ \r\n\ @return\ boolean\ this\ returns\ whether\ a\ pawn\ can\ take\ en\ passant\ \r\n\ \r\n
numComments=24
