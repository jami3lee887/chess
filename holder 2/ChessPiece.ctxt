#BlueJ class context
comment0.target=ChessPiece
comment0.text=\r\n\ The\ class\ ChessPiece\ holds\ the\ methods\ that\ will\ get\ all\ the\ possible\ moves\ for\ the\ pieces\ that\ were\ clicked,\ as\ well\ as\ set\ the\ position\ \r\n\ of\ the\ piece\ after\ the\ move\ was\ made.\r\n\ \r\n\ @author\ Michael\ Tuccillo\r\n\ @version\ 1.0\r\n\ @since\ 2022-1-14\r\n
comment1.params=imageIn\ pieceName
comment1.target=ChessPiece(java.lang.String,\ java.lang.String)
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ ChessPiece.\ This\ constructor\ will\ take\ in\ the\ name\ and\ image\ of\ the\ piece,\ then\ set\ the\ image\ and\ name\ based\ on\ what\ was\ provided.\r\n\ @param\ String\ imageIn\ is\ the\ name\ of\ image\ file\r\n\ @param\ String\ pieceName\ is\ the\ name\ of\ the\ piece\r\n
comment10.params=grid\ clickedPiece
comment10.target=void\ kingsMove(ChessPiece[][],\ ChessPiece)
comment10.text=\r\n\ The\ method\ KingsMove\ will\ check\ the\ kings\ move\ set\ and\ check\ if\ the\ move\ is\ a\ legal\ move\ or\ not.\ It\ will\ ensure\ there\ is\ not\ its\ own\ piece\ in\ the\ move\ location,\ or\ the\ move\ \r\n\ will\ put\ the\ king\ off\ the\ board.\r\n\ @param\ ChessPiece[][]\ grid\ is\ a\ 2d\ array\ that\ holds\ the\ location\ of\ the\ pieces\r\n\ @param\ ChessPiece\ clickedPiece\ is\ the\ piece\ that\ was\ clicked\r\n
comment11.params=grid\ clickedPiece
comment11.target=void\ setPawn(ChessPiece[][],\ ChessPiece)
comment11.text=\r\n\ The\ method\ setPawn\ will\ check\ the\ pawn\ move\ set\ and\ check\ if\ the\ move\ is\ a\ legal\ move\ or\ not.\ It\ will\ ensure\ there\ is\ not\ its\ own\ piece\ in\ the\ move\ location,\ or\ the\ move\ \r\n\ will\ put\ the\ pawn\ \ off\ the\ board.\r\n\ @param\ ChessPiece[][]\ grid\ is\ a\ 2d\ array\ that\ holds\ the\ location\ of\ the\ pieces\r\n\ @param\ ChessPiece\ clickedPiece\ is\ the\ piece\ that\ was\ clicked\r\n
comment12.params=grid\ clickedPiece
comment12.target=void\ setKnight(ChessPiece[][],\ ChessPiece)
comment12.text=\r\n\ The\ method\ setKnight\ will\ check\ the\ knights\ move\ set\ and\ check\ if\ the\ move\ is\ a\ legal\ move\ or\ not.\ It\ will\ ensure\ there\ is\ not\ its\ own\ piece\ in\ the\ move\ location,\ or\ the\ move\ \r\n\ will\ put\ the\ knight\ off\ the\ board.\r\n\ @param\ ChessPiece[][]\ grid\ is\ a\ 2d\ array\ that\ holds\ the\ location\ of\ the\ pieces\r\n\ @param\ ChessPiece\ clickedPiece\ is\ the\ piece\ that\ was\ clicked\r\n
comment13.params=grid\ clickedPiece
comment13.target=void\ setUpDown(ChessPiece[][],\ ChessPiece)
comment13.text=\r\n\ The\ method\ setUpDown\ will\ check\ all\ the\ horizontal\ and\ vertical\ moves\ for\ rooks\ and\ queens.\ \r\n\ It\ will\ add\ all\ the\ legal\ moves\ to\ the\ list\ of\ moves.\r\n\ @param\ ChessPiece[][]\ grid\ is\ a\ 2d\ array\ that\ holds\ the\ location\ of\ the\ pieces\r\n\ @param\ ChessPiece\ clickedPiece\ is\ the\ piece\ that\ was\ clicked\r\n
comment14.params=grid\ clickedPiece
comment14.target=void\ setDiags(ChessPiece[][],\ ChessPiece)
comment14.text=\r\n\ The\ method\ setDiags\ will\ check\ all\ the\ diagonal\ moves\ for\ bishops\ and\ queens.\ \r\n\ It\ will\ add\ all\ the\ legal\ moves\ to\ the\ list\ of\ moves.\r\n\ @param\ ChessPiece[][]\ grid\ is\ a\ 2d\ array\ that\ holds\ the\ location\ of\ the\ pieces\r\n\ @param\ ChessPiece\ clickedPiece\ is\ the\ piece\ that\ was\ clicked\r\n
comment15.params=col\ row\ piece
comment15.target=void\ setPosition(int,\ int,\ ChessPiece)
comment15.text=\r\n\ The\ method\ setPosition\ will\ set\ the\ location\ of\ the\ piece\ being\ moved,\ and\ remove\ the\ object\ the\ piece\ is\ taking.\r\n\ It\ also\ detects\ if\ a\ pawn\ has\ moved\ into\ a\ location\ where\ it\ can\ be\ promoted\ and\ will\ erase\ all\ move\ related\ lists.\r\n\ @param\ int\ col\ is\ the\ col\ the\ piece\ is\ moving\ to\r\n\ @param\ int\ row\ is\ the\ row\ the\ piece\ is\ moving\ to\r\n\ @param\ ChessPiece\ piece\ is\ the\ piece\ that\ is\ being\ moved\r\n
comment16.params=
comment16.target=int\ getInitialRow()
comment16.text=\r\n\ The\ method\ getInitialRow\ will\ return\ the\ starting\ row\ of\ the\ piece\r\n\ @return\ int\ initialRow\ is\ the\ row\ of\ the\ piece\r\n
comment17.params=
comment17.target=int\ getInitialCol()
comment17.text=\r\n\ The\ method\ getInitialCol\ will\ return\ the\ starting\ column\ of\ the\ piece\r\n\ @return\ int\ initialCol\ is\ the\ col\ of\ the\ piece\r\n
comment18.params=firstAdjuster\ secondAdjuster\ piece
comment18.target=int[]\ getPossibleMoves(int,\ int,\ ChessPiece)
comment18.text=\r\n\ The\ method\ getPossibleMoves\ will\ add\ the\ possible\ move\ location\ to\ an\ integer\ array,\ then\ return\ that\ array.\r\n\ It\ will\ also\ ensure\ that\ the\ possible\ move\ does\ not\ cause\ a\ self\ check,\ then\ add\ that\ move\ to\ the\ list\ of\ moves.\r\n\ @param\ int\ firstAdjuster\ is\ the\ difference\ between\ the\ initial\ row\ and\ possible\ move\ row\r\n\ @param\ int\ secondAdjuster\ is\ the\ difference\ between\ the\ initial\ column\ and\ possible\ move\ column\r\n\ @param\ ChessPiece\ piece\ is\ the\ piece\ that\ can\ do\ the\ possible\ move\r\n\ @return\ int[]\ will\ return\ an\ array\ contain\ the\ row\ and\ column\ of\ the\ possible\ move\r\n
comment19.params=checkingIn
comment19.target=void\ setChecking(boolean)
comment19.text=\r\n\ The\ method\ setChecking\ will\ set\ the\ checking\ status\r\n\ @param\ boolean\ checkingIn\ identifies\ if\ the\ program\ is\ checking\ for\ check\r\n
comment2.params=pieceNameIn
comment2.target=void\ setPieceName(java.lang.String)
comment2.text=\r\n\ This\ method\ will\ take\ the\ provided\ piece\ name,\ and\ set\ the\ name\ of\ the\ piece\ to\ that\ name.\r\n\ @param\ String\ pieceNameIn\ is\ the\ name\ of\ the\ piece\r\n
comment20.params=grid\ checkingMate\ piece
comment20.target=boolean\ isCheck(ChessPiece[][],\ java.lang.String,\ ChessPiece)
comment20.text=\r\n\ The\ method\ isCheck\ will\ go\ through\ a\ list\ of\ possible\ moves\ and\ check\ if\ that\ move\ would\ take\ the\ opposing\ king.\ Thus\ meaning\ that\ king\ is\ in\ check.\r\n\ @param\ ChessPiece[][]\ grid\ is\ a\ 2d\ array\ holding\ the\ locations\ of\ all\ the\ pieces\r\n\ @param\ String\ checkingMate\ determines\ if\ it\ checking\ for\ mate\ or\ normal\ check\r\n\ @param\ ChessPiece\ piece\ is\ the\ piece\ that\ can\ do\ the\ possible\ move\r\n\ @return\ boolean\ that\ signifies\ if\ there\ is\ check\ or\ checkmate\r\n
comment21.params=piece
comment21.target=boolean\ testing(ChessPiece)
comment21.text=\r\n\ The\ method\ testing\ will\ go\ through\ a\ list\ containing\ all\ the\ possible\ moves\ of\ the\ pieces\ for\ whoevers\ turn\ it\ is,\ \r\n\ then\ call\ on\ a\ method\ that\ will\ check\ each\ of\ these\ moves\ to\ determine\ if\ they\ would\ stop\ that\ king\ from\ being\ in\ check.\r\n\ @param\ ChessPiece\ is\ the\ piece\ that\ can\ do\ the\ possible\ move\r\n\ @return\ boolean\ will\ return\ whether\ it\ is\ checkmate\ or\ not.\r\n
comment22.params=piece
comment22.target=boolean\ isThereMoves(ChessPiece)
comment22.text=\r\n\ The\ method\ isThereMoves\ will\ see\ if\ there\ are\ possible\ moves\ to\ be\ made.\r\n\ @param\ ChessPiece\ piece\ is\ the\ piece\ that\ can\ do\ that\ possible\ move\r\n\ @return\ boolean\ will\ return\ true\ if\ there\ are\ moves.\r\n
comment23.params=
comment23.target=void\ setList()
comment23.text=\r\n\ The\ method\ setList\ will\ clear\ the\ list\ list.\r\n
comment24.params=
comment24.target=void\ setRealMoves()
comment24.text=\r\n\ The\ method\ setRealMoves\ will\ clear\ the\ list\ realMoves.\r\n
comment25.params=
comment25.target=void\ setTestList()
comment25.text=\r\n\ The\ method\ setTestList\ will\ clear\ the\ list\ test.\r\n
comment3.params=grid\ piece
comment3.target=void\ setInitialPos(ChessPiece[][],\ ChessPiece)
comment3.text=\ \r\n\ This\ method\ will\ take\ the\ piece\ provided\ piece,\ and\ parse\ through\ the\ grid\ of\ pieces\ until\ it\ finds\ itself.\r\n\ It\ will\ then\ set\ its\ location\ holding\ variables\ to\ this\ location.\r\n\ @param\ ChessPiece[][]\ grid\ is\ the\ 2d\ array\ that\ holds\ the\ location\ of\ all\ the\ pieces\r\n\ @param\ ChessPiece\ piece\ is\ the\ current\ piece\ it\ is\ looking\ for\r\n
comment4.params=grid\ clickedPiece
comment4.target=void\ getLegalMoves(ChessPiece[][],\ ChessPiece)
comment4.text=\r\n\ This\ method\ will\ take\ the\ piece\ that\ was\ clicked,\ and\ determine\ which\ type\ of\ piece\ it\ is.\r\n\ It\ will\ then\ call\ on\ methods\ that\ will\ get\ the\ legal\ moves\ for\ that\ specific\ piece.\r\n\ @param\ ChessPiece[][]\ grid\ is\ the\ 2d\ array\ that\ holds\ the\ location\ of\ all\ the\ pieces\r\n\ @param\ ChessPiece\ clickedPiece\ is\ the\ piece\ that\ was\ clicked\r\n
comment5.params=
comment5.target=void\ setPawnMoved()
comment5.text=\r\n\ The\ method\ setPawnMoved\ will\ set\ the\ status\ of\ the\ piece\ to\ moved,\ indicating\ that\ it\ has\ moved\r\n
comment6.params=
comment6.target=void\ setKingMoved()
comment6.text=\r\n\ The\ method\ setKingMoved\ will\ set\ the\ status\ of\ the\ piece\ to\ moved,\ indicating\ that\ it\ has\ moved\r\n
comment7.params=
comment7.target=void\ setRookHasMoved()
comment7.text=\r\n\ The\ method\ setRookHasMoved\ will\ set\ the\ status\ of\ the\ piece\ to\ moved,\ indicating\ that\ it\ has\ moved\r\n
comment8.params=possibleMove
comment8.target=void\ addToListKingKnight(int[])
comment8.text=\r\n\ The\ method\ addToListKingKnight\ will\ take\ in\ the\ possible\ move\ for\ the\ knight\ or\ king,\ and\ add\ it\ to\ the\ list\ of\ possible\ moves\r\n\ @param\ int[]\ possibleMove\ is\ an\ integer\ array\ that\ holds\ the\ column\ and\ row\ of\ the\ possible\ move\r\n
comment9.params=grid\ clickedPiece
comment9.target=void\ castling(ChessPiece[][],\ ChessPiece)
comment9.text=\ \r\n\ The\ method\ castling\ is\ responsible\ for\ checking\ if\ the\ king\ can\ castle\ to\ either\ side.\r\n\ It\ will\ ensure\ that\ all\ the\ requirements\ are\ met,\ then\ set\ a\ variable\ indicating\ that\ the\ king\ can\ castle.\r\n\ @param\ ChessPiece\ grid\ is\ a\ 2d\ array\ that\ holds\ the\ current\ location\ of\ the\ all\ the\ pieces\r\n\ @param\ ChessPiece\ clickedPiece\ is\ the\ king\ that\ was\ clicked\r\n
numComments=26
